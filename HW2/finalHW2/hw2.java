/**
 * This is hw2.java
 * It provides GUI and queries database
 * @author yang
 */

import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.sql.Connection ;
import java.sql.DriverManager ;
import java.sql.SQLException ;
import java.sql.Statement ;
import java.sql.ResultSet ;
import java.util.ArrayList;
import java.util.List;
import javax.swing.text.BadLocationException;

public class hw2 extends JFrame {

	// Begin to variables declaration                    
    private javax.swing.JLabel activeFeatures;
    private javax.swing.JCheckBox animalCheck;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField currCoordinate;
    private javax.swing.JRadioButton findRange;
    private javax.swing.JTextArea inputQuery;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel map;
    private javax.swing.JTextArea outputInfo;
    private javax.swing.JButton submitQueryButton;
    private javax.swing.JCheckBox truckCheck;
    private javax.swing.JRadioButton vaccCoverage;
    private javax.swing.JRadioButton vaccSupplies;               

    public int Xcoordinate;
    public int Ycoordinate;
    public int count = 0;
    public int animalCheckValueCount = 0;
    public int truckCheckValueCount = 0;

    public int outLoopCount,inLoopCount;

    public int [] getXcoordinate = new int [2];
    public int [] getYcoordinate = new int [2];
    public int infoXcoordinateLeft,infoXcoordinateRight,infoYcoordinateUp,infoYcoordinateDown;
    public boolean findRangeRadioButton = false;
    public boolean vaccCoverageRadioButton = false;
    public boolean vaccSuppliesRadioButton = false;

    public boolean animalCheckValue = false;
    public boolean truckCheckValue = false;

    public boolean vaccCoverageProcess = false;
    public boolean vaccSuppliesProcess = false;
    public boolean repeatTruckName = false;
    //These variables are used for connection of database
    public static final String oracleDriver = "oracle.jdbc.driver.OracleDriver";
    public static final String oracleURL = "jdbc:oracle:thin:@localhost:1521:MLDN";
    public static final String oracleUser = "scott";
    public static final String oraclePassword = "tiger";

    List <Integer> preAnimalX = new ArrayList<Integer>();
    List <Integer> preAnimalY = new ArrayList<Integer>();

    List <Integer> preTruckX = new ArrayList<Integer>();
    List <Integer> preTruckY = new ArrayList<Integer>();
	//End of variable declaration

    // Creates new form hw2 
    public hw2() {
        initComponents();
    }

    //The follow method is used for gui which is generated by netbeans                    
    private void initComponents() {
    
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputInfo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputQuery = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        findRange = new javax.swing.JRadioButton();
        vaccSupplies = new javax.swing.JRadioButton();
        vaccCoverage = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        animalCheck = new javax.swing.JCheckBox();
        truckCheck = new javax.swing.JCheckBox();
        activeFeatures = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        map = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        clearButton = new javax.swing.JButton();
        submitQueryButton = new javax.swing.JButton();
        currCoordinate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chenchen Yang 7390950623");

        outputInfo.setColumns(20);
        outputInfo.setRows(5);
        jScrollPane1.setViewportView(outputInfo);

        inputQuery.setColumns(20);
        inputQuery.setRows(5);
        jScrollPane2.setViewportView(inputQuery);

        buttonGroup1.add(findRange);
        findRange.setText("Range");
        findRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findRangeActionPerformed(evt);
            }
        });

        buttonGroup1.add(vaccSupplies);
        vaccSupplies.setText("Find Nearest Vaccine Supplies");
        vaccSupplies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vaccSuppliesActionPerformed(evt);
            }
        });

        buttonGroup1.add(vaccCoverage);
        vaccCoverage.setText("Find Vaccination Coverage");
        vaccCoverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vaccCoverageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findRange)
                    .addComponent(vaccCoverage)
                    .addComponent(vaccSupplies))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(findRange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vaccCoverage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vaccSupplies)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        animalCheck.setText("Animals");
        animalCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animalCheckActionPerformed(evt);
            }
        });

        truckCheck.setText("Trucks");
        truckCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truckCheckActionPerformed(evt);
            }
        });

        activeFeatures.setText("Active Features");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(truckCheck)
                    .addComponent(animalCheck)
                    .addComponent(activeFeatures))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(activeFeatures)
                .addGap(6, 6, 6)
                .addComponent(animalCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(truckCheck)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLabel2.setText("Current Coordinates (X,Y):");

        map.setIcon(new javax.swing.ImageIcon("land.jpg")); 
        map.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapMouseClicked(evt);
            }
        });
        map.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mapMouseMoved(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        submitQueryButton.setText("Submit Query");
        submitQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitQueryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(clearButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(submitQueryButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submitQueryButton)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        currCoordinate.setText("jTextField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(map, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(159, 159, 159)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(map, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(currCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }
	
    //The method is used for find range radio button action
    private void findRangeActionPerformed(java.awt.event.ActionEvent evt) {                                          
        findRangeRadioButton = true;
        vaccCoverageRadioButton = false;
        vaccSuppliesRadioButton = false;

    }                                         
    //The method is used for animal check button action
    private void animalCheckActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if (animalCheckValueCount % 2 == 0)
            animalCheckValue = true;
        else 
            animalCheckValue = false;
        animalCheckValueCount++;
    }                                           
    //The method is used for show coordinations when mouse is moving.
    private void mapMouseMoved(java.awt.event.MouseEvent evt) {                               
       Xcoordinate = evt.getX();
       Ycoordinate = evt.getY();
       currCoordinate.setText(Integer.toString(Xcoordinate)+","+Integer.toString(Ycoordinate));
    }                              
    //The method is used for mouse clicked action on map. Choose the range. Click animals and trucks
    private void mapMouseClicked(java.awt.event.MouseEvent evt) {                                 
       count ++;
	   //The method is used for choose the range by clicks on map twice
       if (count <= 2 && findRangeRadioButton == true)
      {    //Draw cross
           Graphics g = map.getGraphics();
           g.setColor(Color.BLUE);
           g.drawLine(evt.getX()-20,evt.getY()-20,evt.getX()+20,evt.getY()+20);
           g.drawLine(evt.getX()+20,evt.getY()-20,evt.getX()-20,evt.getY()+20);
           //Draw rectangle
           getXcoordinate[count-1] = evt.getX();
           getYcoordinate[count-1] = evt.getY();
           if (count == 2)
              g.drawRect(getXcoordinate[0],getYcoordinate[1],getXcoordinate[1]-getXcoordinate[0],getYcoordinate[0]-getYcoordinate[1]);
        
       }
      if (count >= 3)//The method is used for click on the animals and trucks to find some information
      {
            infoXcoordinateLeft = evt.getX()-3;
            infoXcoordinateRight = evt.getX()+3;
            infoYcoordinateUp = evt.getY()-3;
            infoYcoordinateDown = evt.getY()+3;
            try {
                Connection conn = null;//Database connection
                Statement stmt = null;
                ResultSet rsCount = null;
                ResultSet rs1 = null;
                ResultSet rs2 = null;
                ResultSet rsVaccName = null;
                String sqlCount = "SELECT COUNT(*) FROM animals a WHERE a.shape.sdo_point.x >="+ infoXcoordinateLeft+"AND a.shape.sdo_point.x <= "+infoXcoordinateRight+"AND a.shape.sdo_point.y >= "+infoYcoordinateUp+"AND a.shape.sdo_point.y <= "+infoYcoordinateDown;
                try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                rsCount = stmt.executeQuery(sqlCount);
                rsCount.next();
				//Click the animals to find the animals' information
                if (rsCount.getInt(1) == 1)
                {
                    String sql1 = "SELECT animal_name,a.shape.sdo_point.x,a.shape.sdo_point.y FROM animals a WHERE a.shape.sdo_point.x >="+ infoXcoordinateLeft+"AND a.shape.sdo_point.x <= "+infoXcoordinateRight+"AND a.shape.sdo_point.y >= "+infoYcoordinateUp+"AND a.shape.sdo_point.y <= "+infoYcoordinateDown;
                    rs1 = stmt.executeQuery(sql1);

                    rs1.next();
                    String animalName = rs1.getString(1); 
                    int animalX = rs1.getInt(2); 
                    int animalY = rs1.getInt(3);
                    outputInfo.setText("Name:"+animalName+"\n"+"Location:"+Integer.toString(animalX)+","+Integer.toString(animalY));
                  
                }
				//Click the trucks to find the trucks' information
                else
                {
                    String sql2 = "SELECT truck_name,t.shape.sdo_point.x,t.shape.sdo_point.y,id_vaccines FROM trucks t WHERE t.shape.sdo_point.x >="+ infoXcoordinateLeft +"AND t.shape.sdo_point.x <= "+infoXcoordinateRight+"AND t.shape.sdo_point.y >= "+infoYcoordinateUp+"AND t.shape.sdo_point.y <= "+infoYcoordinateDown;
                    rs2 = stmt.executeQuery(sql2);

                    rs2.next(); 
                    String truckName = rs2.getString(1); //Get truck name
                    int truckX = rs2.getInt(2); //Get truck X coordination
                    int truckY = rs2.getInt(3);//Get truck Y coordination
                    String truckVaccine = rs2.getString(4);
                    String [] vaccID = truckVaccine.split(":");
                    List <String> list = new ArrayList <String>();
                    for(int n = 0; n <= vaccID.length-1; n++)
                    {
                        String sqlVaccName = "SELECT vaccine_name FROM vaccines WHERE vaccine_id = '"+ vaccID[n]+"'";
                        rsVaccName = stmt.executeQuery(sqlVaccName);
                        rsVaccName.next();
                        String VaccName = rsVaccName.getString(1);//Get vaccine name 
                        list.add(VaccName+"("+vaccID[n]+"),");  
                    }
                   
                    outputInfo.setText("Name:"+truckName+"\n"+"Location:"+Integer.toString(truckX)+","+Integer.toString(truckY)+"\n"+"Vaccines:");                       
                    for(int n = 0; n <= vaccID.length - 1; n++)
                        outputInfo.append(list.get(n));

                    rsVaccName.close();
                }

                rs2.close();
                rs1.close();
                rsCount.close();
                stmt.close();
                conn.close(); //Close the connection to database
            } catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }

      }
    }                                
    //The method is used for find vaccination coverage radio button action
    private void vaccCoverageActionPerformed(java.awt.event.ActionEvent evt) {                                             
       findRangeRadioButton = false;
       vaccCoverageRadioButton = true;
       vaccSuppliesRadioButton = false;
    }                                            
    //The method is used for truck check button action
    private void truckCheckActionPerformed(java.awt.event.ActionEvent evt) {                                           
       if (truckCheckValueCount %2 == 0)
           truckCheckValue = true;        
       else
           truckCheckValue = false;
       truckCheckValueCount ++;
    }                                          
    //The method is used for submit query button action
    private void submitQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
       //Choose animal check button and find range radio button to find animals in some range
        if (animalCheckValue == true && truckCheckValue == false && findRangeRadioButton == true)
       {
          try {
                Connection conn = null;//Create connection to database
                Statement stmt = null;
                ResultSet rs = null;
                //sql to find animals in certain range
                String sql = "SELECT animal_id,animal_name,a.shape.sdo_point.x,a.shape.sdo_point.y FROM animals a WHERE a.shape.sdo_point.x >="+getXcoordinate[0]+"AND a.shape.sdo_point.x <= "+getXcoordinate[1]+"AND a.shape.sdo_point.y >= "+getYcoordinate[1]+"AND a.shape.sdo_point.y <= "+getYcoordinate[0];
                try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                rs = stmt.executeQuery(sql);
                //Draw animals circles
		        Graphics g = map.getGraphics();
                g.setColor(Color.RED);

		        inputQuery.setText(sql);

                while (rs.next()) {

                    int animalX = rs.getInt(3); // Get animals X value
                    int animalY = rs.getInt(4);// Get animals Y value
                    //Draw animal circle according to X,Y value
                    g.fillOval(animalX-5, animalY-5, 10, 10);
                }
                rs.close();
                stmt.close();
                conn.close(); // Close the database
            } catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }

       }else if (animalCheckValue == false && truckCheckValue == true && findRangeRadioButton == true)
       { //Choose truck check button and find range radio button to find truck in certain range
          try {
                Connection conn = null;//Create connection to database
                Statement stmt = null;
                ResultSet rs = null;
				//sql to find trucks in certain range
                String sql = "SELECT truck_id,truck_name,t.shape.sdo_point.x,t.shape.sdo_point.y,id_vaccines FROM trucks t WHERE t.shape.sdo_point.x >="+getXcoordinate[0]+"AND t.shape.sdo_point.x <= "+getXcoordinate[1]+"AND t.shape.sdo_point.y >= "+getYcoordinate[1]+"AND t.shape.sdo_point.y <= "+getYcoordinate[0];
                try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                rs = stmt.executeQuery(sql);
                //Draw triangle
		        Graphics g = map.getGraphics();
                g.setColor(Color.YELLOW);

		        int [] truckTriX = new int [3];
                int [] truckTriY = new int [3];

                inputQuery.setText(sql);

		        while (rs.next()) {
                    int truckX = rs.getInt(3); //Get truck X coordination
                    int truckY = rs.getInt(4);//Get truck Y coordination

		            truckTriX [0] = truckX;
		            truckTriY [0] = truckY - 3;
		            truckTriX [1] = truckX - 5;
		            truckTriY [1] = truckY + 4;
		            truckTriX [2] = truckX + 5;
		            truckTriY [2] = truckY + 4;

                    g.fillPolygon(truckTriX, truckTriY, 3);//Draw triangle
                }
                rs.close();
                stmt.close();
                conn.close(); //Close database connection
            } catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }
       }else if (animalCheckValue == true && truckCheckValue == true && findRangeRadioButton == true)
       {//Choose animal check button adn truck check buttons to find animals and trucks in certain range
          try {
                Connection conn = null;//Create connection to database
                Statement stmt = null;
                ResultSet rsAnimal = null;
		        ResultSet rsTruck = null;
                String sqlAnimal = "SELECT animal_id,animal_name,a.shape.sdo_point.x,a.shape.sdo_point.y FROM animals a WHERE a.shape.sdo_point.x >="+getXcoordinate[0]+"AND a.shape.sdo_point.x <= "+getXcoordinate[1]+"AND a.shape.sdo_point.y >= "+getYcoordinate[1]+"AND a.shape.sdo_point.y <= "+getYcoordinate[0];
                String sqlTruck = "SELECT truck_id,truck_name,t.shape.sdo_point.x,t.shape.sdo_point.y,id_vaccines FROM trucks t WHERE t.shape.sdo_point.x >="+getXcoordinate[0]+"AND t.shape.sdo_point.x <= "+getXcoordinate[1]+"AND t.shape.sdo_point.y >= "+getYcoordinate[1]+"AND t.shape.sdo_point.y <= "+getYcoordinate[0];

		        inputQuery.setText("Query1:"+sqlAnimal+"\n"+"Query2:"+sqlTruck);

		       try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                rsAnimal = stmt.executeQuery(sqlAnimal);
                //Draw circle of animals
		        Graphics gAnimal = map.getGraphics();
                gAnimal.setColor(Color.RED);

		        while (rsAnimal.next()) {

                    int animalX = rsAnimal.getInt(3); //Get animal X coordination
                    int animalY = rsAnimal.getInt(4);//Get animal Y coordination

                    gAnimal.fillOval(animalX-5, animalY-5, 10, 10);//Draw circle of animals
                }
                rsAnimal.close();

	         	rsTruck = stmt.executeQuery(sqlTruck);
                //Draw triangle of trucks
	  	        Graphics gTruck = map.getGraphics();
                gTruck.setColor(Color.YELLOW);
 
		        int [] truckTriX = new int [3];
                int [] truckTriY = new int [3];

		        while (rsTruck.next()) {
                    int truckX = rsTruck.getInt(3); //Get truck X coordination
                    int truckY = rsTruck.getInt(4);//Get truck Y coordination

		            truckTriX [0] = truckX;
		            truckTriY [0] = truckY - 3;
		            truckTriX [1] = truckX - 5;
		            truckTriY [1] = truckY + 4;
		            truckTriX [2] = truckX + 5;
		            truckTriY [2] = truckY + 4;

                    gTruck.fillPolygon(truckTriX, truckTriY, 3);//Draw triangle
                }
                rsTruck.close();

                stmt.close();
                conn.close(); // Close connection to database
            } catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }

	   }
      try {//Find truck coverage when choose find vaccination coverage radio button
           if (vaccCoverageRadioButton == true && outputInfo.getText(5, 5).equals("truck")) {
               vaccCoverageProcess = true;
            }
       } catch (BadLocationException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
       }
       if (vaccCoverageProcess == true)
       {
           vaccCoverageProcess = false;

           if (preAnimalX.isEmpty() && preAnimalY.isEmpty()){
               try {
                Connection conn = null;//Create connection to database
                Statement stmt = null;
                ResultSet rs = null;
                ResultSet rsAnimalName = null;
                ResultSet rsLocationInQ2 = null;
              try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                String sql = "SELECT id_vaccines FROM trucks t WHERE t.shape.sdo_point.x >=" + infoXcoordinateLeft + "AND t.shape.sdo_point.x <= " + infoXcoordinateRight + "AND t.shape.sdo_point.y >= " + infoYcoordinateUp + "AND t.shape.sdo_point.y <= " + infoYcoordinateDown;

                inputQuery.setText("Query1:"+sql+"\n");

                rs = stmt.executeQuery(sql);
                rs.next();
                String truckVaccine = rs.getString(1);
                String[] vaccID = truckVaccine.split(":");
				//Make the animals green 
                Graphics g = map.getGraphics();
                g.setColor(Color.GREEN);
                outLoopCount = 2;
                inLoopCount = 2;
                //Use sql to find the suitable animals 
                for (int n = 0; n <= vaccID.length - 1; n++) {
                    String sqlAnimalName = "SELECT animal_name FROM vaccines WHERE vaccine_id = '" + vaccID[n] + "'";
                    inputQuery.append("Query"+(outLoopCount+(inLoopCount-2))+":"+sqlAnimalName+"\n");
                    rsAnimalName = stmt.executeQuery(sqlAnimalName);
                    rsAnimalName.next();
                    String animalNameInQ2 = rsAnimalName.getString(1);
                    String[] animalNameSplitted = animalNameInQ2.split(":");
                    for (int m = 0; m <= animalNameSplitted.length - 1; m++) {
                        inLoopCount ++;
                        String sqlLocationInQ2 = "SELECT a.shape.sdo_point.x,a.shape.sdo_point.y FROM animals a WHERE a.shape.sdo_point.x >=" + getXcoordinate[0] + "AND a.shape.sdo_point.x <= " + getXcoordinate[1] + "AND a.shape.sdo_point.y >= " + getYcoordinate[1] + "AND a.shape.sdo_point.y <= " + getYcoordinate[0] + "AND a.animal_name = '" + animalNameSplitted[m] + "'";
                        inputQuery.append("Query"+(outLoopCount+(inLoopCount-2))+":"+sqlLocationInQ2+"\n");
                        rsLocationInQ2 = stmt.executeQuery(sqlLocationInQ2);
                        while (rsLocationInQ2.next())
                        {
                            int locationXinQ2 = rsLocationInQ2.getInt(1);//Get the animals X 
                            int locationYinQ2 = rsLocationInQ2.getInt(2);//Get the animals Y
                            preAnimalX.add(locationXinQ2);
                            preAnimalY.add(locationYinQ2);
                            g.fillOval(locationXinQ2 - 5, locationYinQ2 - 5, 10, 10);//Draw circle of animals
                        }
                    }
                    outLoopCount ++;
                }
                rsLocationInQ2.close();
                rsAnimalName.close();
                rs.close();
                stmt.close();
                conn.close();//Close the connection to database

            } 
            catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }
           }else{//Make the previous green animals red and then find the new query of suitable animals
                Graphics g1 = map.getGraphics();
                g1.setColor(Color.RED);

                for(int n = 0; n <= preAnimalX.size()-1; n++)
                    g1.fillOval(preAnimalX.get(n) - 5, preAnimalY.get(n) - 5, 10, 10);

                preAnimalX.clear();
                preAnimalY.clear();
             try {
                Connection conn = null;//Create connection to database
                Statement stmt = null;
                ResultSet rs = null;
                ResultSet rsAnimalName = null;
                ResultSet rsLocationInQ2 = null;
              try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                String sql = "SELECT id_vaccines FROM trucks t WHERE t.shape.sdo_point.x >=" + infoXcoordinateLeft + "AND t.shape.sdo_point.x <= " + infoXcoordinateRight + "AND t.shape.sdo_point.y >= " + infoYcoordinateUp + "AND t.shape.sdo_point.y <= " + infoYcoordinateDown;

                inputQuery.setText("Query1:"+sql+"\n");

                rs = stmt.executeQuery(sql);
                rs.next();
                String truckVaccine = rs.getString(1);
                String[] vaccID = truckVaccine.split(":");
                Graphics g = map.getGraphics();
                g.setColor(Color.GREEN);
                outLoopCount = 2;
                inLoopCount = 2;
                //Use sql to find the suitable animals
                for (int n = 0; n <= vaccID.length - 1; n++) {
                    String sqlAnimalName = "SELECT animal_name FROM vaccines WHERE vaccine_id = '" + vaccID[n] + "'";
                    inputQuery.append("Query"+(outLoopCount+(inLoopCount-2))+":"+sqlAnimalName+"\n");
                    rsAnimalName = stmt.executeQuery(sqlAnimalName);
                    rsAnimalName.next();
                    String animalNameInQ2 = rsAnimalName.getString(1);
                    String[] animalNameSplitted = animalNameInQ2.split(":");
                    for (int m = 0; m <= animalNameSplitted.length - 1; m++) {
                        inLoopCount ++;
                        String sqlLocationInQ2 = "SELECT a.shape.sdo_point.x,a.shape.sdo_point.y FROM animals a WHERE a.shape.sdo_point.x >=" + getXcoordinate[0] + "AND a.shape.sdo_point.x <= " + getXcoordinate[1] + "AND a.shape.sdo_point.y >= " + getYcoordinate[1] + "AND a.shape.sdo_point.y <= " + getYcoordinate[0] + "AND a.animal_name = '" + animalNameSplitted[m] + "'";
                        inputQuery.append("Query"+(outLoopCount+(inLoopCount-2))+":"+sqlLocationInQ2+"\n");
                        rsLocationInQ2 = stmt.executeQuery(sqlLocationInQ2);
                        while (rsLocationInQ2.next())
                        {
                            int locationXinQ2 = rsLocationInQ2.getInt(1);//Get the animals X coordination
                            int locationYinQ2 = rsLocationInQ2.getInt(2);//Get the animals Y coordination
                            preAnimalX.add(locationXinQ2);
                            preAnimalY.add(locationYinQ2);
                            g.fillOval(locationXinQ2 - 5, locationYinQ2 - 5, 10, 10);
                        }
                    }
                    outLoopCount ++;
                }
                rsLocationInQ2.close();
                rsAnimalName.close();
                rs.close();
                stmt.close();
                conn.close();//close the connection

            } 
            catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }
           }
       }
 
      try {//Choose find nearest vaccination supplies 
           if (vaccSuppliesRadioButton == true && (!outputInfo.getText(5, 5).equals("truck"))) {
               vaccSuppliesProcess = true;
            }
       } catch (BadLocationException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
       }
       if (vaccSuppliesProcess == true)
       {
           vaccSuppliesProcess = false;

           if(preTruckX.isEmpty() && preTruckY.isEmpty()){
               try {
                Connection conn = null;//Create connection to database
                Statement stmt = null;
                Statement stmt3 = null;
                Statement stmt2 = null;
                ResultSet rs = null;
                ResultSet rsVaccID = null;
                ResultSet rsTruckLocationInQ3 = null;
                ResultSet rsTruckNameInQ3Count = null;
                ResultSet rsTruckNameInQ3 = null;
                int queryCount1 = 2;
                try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                stmt3 = conn.createStatement();
                stmt2 = conn.createStatement();
                String sql = "SELECT animal_name,a.shape.sdo_point.x,a.shape.sdo_point.y FROM animals a WHERE a.shape.sdo_point.x >="+ infoXcoordinateLeft+"AND a.shape.sdo_point.x <= "+infoXcoordinateRight+"AND a.shape.sdo_point.y >= "+infoYcoordinateUp+"AND a.shape.sdo_point.y <= "+infoYcoordinateDown;

                inputQuery.setText("Query1:"+sql+"\n");

                rs = stmt.executeQuery(sql);
                rs.next();
                String animalNameInQ3 = rs.getString(1);
                int animalInQ3X = rs.getInt(2);
                int animalInQ3Y = rs.getInt(3);


                Graphics g = map.getGraphics();
                g.setColor(Color.BLUE);
                int [] truckTriXInQ3 = new int [3];
                int [] truckTriYInQ3 = new int [3];

                String sqlvaccID = "SELECT vaccine_id,vaccine_name FROM vaccines WHERE animal_name LIKE '%"+animalNameInQ3+"%'";
                inputQuery.append("Query2:"+sqlvaccID+"\n");
                rsVaccID = stmt.executeQuery(sqlvaccID);

                outputInfo.append("\nInformation is :");

                List <String> list = new ArrayList <String> ();
                while(rsVaccID.next())
                {
                   queryCount1 ++;
                   String vaccIDInQ3 = rsVaccID.getString(1);
                   String vaccNameInQ3 = rsVaccID.getString(2);

                   String sqlTruckNameInQ3Count = "SELECT COUNT(*) FROM trucks t WHERE sdo_nn(t.shape,sdo_geometry(2001,NULL,sdo_point_type("+animalInQ3X+","+animalInQ3Y+",NULL),NULL,NULL))='TRUE'AND t.id_vaccines LIKE '%"+vaccIDInQ3+"%' AND t.shape.sdo_point.x >="+getXcoordinate[0]+"AND t.shape.sdo_point.x <= "+getXcoordinate[1]+"AND t.shape.sdo_point.y >= "+getYcoordinate[1]+"AND t.shape.sdo_point.y <= "+getYcoordinate[0]+"AND ROWNUM < 2";
                   rsTruckNameInQ3Count = stmt3.executeQuery(sqlTruckNameInQ3Count);
                   rsTruckNameInQ3Count.next();
                   int countTruckName = rsTruckNameInQ3Count.getInt(1);

                   if (countTruckName == 0){
                       outputInfo.append("\nNo truck in this(these) range area carries this vaccine(s).\n");
                       outputInfo.append(vaccNameInQ3 + "->null\n");
                   }else{
                       String sqlTruckNameInQ3 = "SELECT t.truck_name FROM trucks t WHERE sdo_nn(t.shape,sdo_geometry(2001,NULL,sdo_point_type("+animalInQ3X+","+animalInQ3Y+",NULL),NULL,NULL))='TRUE'AND t.id_vaccines LIKE '%"+vaccIDInQ3+"%' AND t.shape.sdo_point.x >="+getXcoordinate[0]+"AND t.shape.sdo_point.x <= "+getXcoordinate[1]+"AND t.shape.sdo_point.y >= "+getYcoordinate[1]+"AND t.shape.sdo_point.y <= "+getYcoordinate[0]+"AND ROWNUM < 2";

                       inputQuery.append("Query"+queryCount1+":"+sqlTruckNameInQ3+"\n");
                       rsTruckNameInQ3 = stmt2.executeQuery(sqlTruckNameInQ3);

                       rsTruckNameInQ3.next();
                       String nearestTruckName = rsTruckNameInQ3.getString(1);

                       outputInfo.append(vaccNameInQ3+"->"+nearestTruckName+",");
                       if(list.isEmpty())
                           list.add(nearestTruckName);
                       else
                       {
                           for(int n = 0; n <= list.size()-1; n++)
                           {
                               if(nearestTruckName.equals(list.get(n)))
                                  repeatTruckName = true;
                           }
                       }

                       if (repeatTruckName == false)
                           list.add(nearestTruckName);

                   }
                }

                repeatTruckName = false;

                for(int n = 0; n <= list.size()-1; n++){
               
                    String truckLocationInQ3 = "SELECT t.shape.sdo_point.x, t.shape.sdo_point.y FROM trucks t WHERE t.truck_name = '"+list.get(n)+"'";
                    inputQuery.append("Query"+(queryCount1+n+1)+":"+truckLocationInQ3+"\n");
                    rsTruckLocationInQ3 = stmt.executeQuery(truckLocationInQ3);
                    while (rsTruckLocationInQ3.next()){
                        int TruckLocationXInQ3 = rsTruckLocationInQ3.getInt(1);
                        int TruckLocationYInQ3 = rsTruckLocationInQ3.getInt(2);
                        
                        preTruckX.add(TruckLocationXInQ3);
                        preTruckY.add(TruckLocationYInQ3);

                        truckTriXInQ3 [0] = TruckLocationXInQ3;
		        truckTriYInQ3 [0] = TruckLocationYInQ3 - 3;
		        truckTriXInQ3 [1] = TruckLocationXInQ3 - 5;
		        truckTriYInQ3 [1] = TruckLocationYInQ3 + 4;
		        truckTriXInQ3 [2] = TruckLocationXInQ3 + 5;
		        truckTriYInQ3 [2] = TruckLocationYInQ3 + 4;

                        g.fillPolygon(truckTriXInQ3, truckTriYInQ3, 3);
                    }
                }

                rsTruckLocationInQ3.close();
                rsTruckNameInQ3.close();
                rsTruckNameInQ3Count.close();
                rsVaccID.close();
                rs.close();
                stmt2.close();
                stmt3.close();
                stmt.close();
                conn.close();//Close the connection

            } 
            catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }
           }else{
             int [] truckTriXInQ3 = new int [3];
             int [] truckTriYInQ3 = new int [3];
             //Make the previous blue triangle yellow
             Graphics g2 = map.getGraphics();
             g2.setColor(Color.YELLOW);
             for(int n = 0; n <= preTruckX.size() -1; n++){
                 truckTriXInQ3 [0] = preTruckX.get(n);
		 truckTriYInQ3 [0] = preTruckY.get(n) - 3;
		 truckTriXInQ3 [1] = preTruckX.get(n) - 5;
		 truckTriYInQ3 [1] = preTruckY.get(n) + 4;
		 truckTriXInQ3 [2] = preTruckX.get(n) + 5;
		 truckTriYInQ3 [2] = preTruckY.get(n) + 4;

                 g2.fillPolygon(truckTriXInQ3, truckTriYInQ3, 3);//Deaw triangle
             }
             
             preTruckX.clear();
             preTruckY.clear();
 
             try {
                Connection conn = null;//Create connection
                Statement stmt = null;
                Statement stmt3 = null;
                Statement stmt2 = null;
                ResultSet rs = null;
                ResultSet rsVaccID = null;
                ResultSet rsTruckLocationInQ3 = null;
                ResultSet rsTruckNameInQ3Count = null;
                ResultSet rsTruckNameInQ3 = null;
                int queryCount1 = 2;
                try {
                    Class.forName(oracleDriver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
                }
                conn = DriverManager.getConnection(oracleURL, oracleUser, oraclePassword);
                stmt = conn.createStatement();
                stmt3 = conn.createStatement();
                stmt2 = conn.createStatement();
                String sql = "SELECT animal_name,a.shape.sdo_point.x,a.shape.sdo_point.y FROM animals a WHERE a.shape.sdo_point.x >="+ infoXcoordinateLeft+"AND a.shape.sdo_point.x <= "+infoXcoordinateRight+"AND a.shape.sdo_point.y >= "+infoYcoordinateUp+"AND a.shape.sdo_point.y <= "+infoYcoordinateDown;

                inputQuery.setText("Query1:"+sql+"\n");

                rs = stmt.executeQuery(sql);
                rs.next();
                String animalNameInQ3 = rs.getString(1);
                int animalInQ3X = rs.getInt(2);//Get location of animal
                int animalInQ3Y = rs.getInt(3);//Get location of animal


                Graphics g = map.getGraphics();//Draw triangle 
                g.setColor(Color.BLUE);

                String sqlvaccID = "SELECT vaccine_id,vaccine_name FROM vaccines WHERE animal_name LIKE '%"+animalNameInQ3+"%'";
                inputQuery.append("Query2:"+sqlvaccID+"\n");
                rsVaccID = stmt.executeQuery(sqlvaccID);

                outputInfo.append("\nInformation is :");

                List <String> list = new ArrayList <String> ();
                while(rsVaccID.next())
                {
                   queryCount1 ++;
                   String vaccIDInQ3 = rsVaccID.getString(1);
                   String vaccNameInQ3 = rsVaccID.getString(2);

                   String sqlTruckNameInQ3Count = "SELECT COUNT(*) FROM trucks t WHERE sdo_nn(t.shape,sdo_geometry(2001,NULL,sdo_point_type("+animalInQ3X+","+animalInQ3Y+",NULL),NULL,NULL))='TRUE'AND t.id_vaccines LIKE '%"+vaccIDInQ3+"%' AND t.shape.sdo_point.x >="+getXcoordinate[0]+"AND t.shape.sdo_point.x <= "+getXcoordinate[1]+"AND t.shape.sdo_point.y >= "+getYcoordinate[1]+"AND t.shape.sdo_point.y <= "+getYcoordinate[0]+"AND ROWNUM < 2";
                   rsTruckNameInQ3Count = stmt3.executeQuery(sqlTruckNameInQ3Count);
                   rsTruckNameInQ3Count.next();
                   int countTruckName = rsTruckNameInQ3Count.getInt(1);

                   if (countTruckName == 0){
                       outputInfo.append("\nNo truck in this(these) range area carries this vaccine(s).\n");
                       outputInfo.append(vaccNameInQ3 + "->null\n");
                   }else{
                       
                       String sqlTruckNameInQ3 = "SELECT t.truck_name FROM trucks t WHERE sdo_nn(t.shape,sdo_geometry(2001,NULL,sdo_point_type("+animalInQ3X+","+animalInQ3Y+",NULL),NULL,NULL))='TRUE'AND t.id_vaccines LIKE '%"+vaccIDInQ3+"%' AND t.shape.sdo_point.x >="+getXcoordinate[0]+"AND t.shape.sdo_point.x <= "+getXcoordinate[1]+"AND t.shape.sdo_point.y >= "+getYcoordinate[1]+"AND t.shape.sdo_point.y <= "+getYcoordinate[0]+"AND ROWNUM < 2";

                       inputQuery.append("Query"+queryCount1+":"+sqlTruckNameInQ3+"\n");
                       rsTruckNameInQ3 = stmt2.executeQuery(sqlTruckNameInQ3);

                       rsTruckNameInQ3.next();
                       String nearestTruckName = rsTruckNameInQ3.getString(1);

                       outputInfo.append(vaccNameInQ3+"->"+nearestTruckName+",");
                       if(list.isEmpty())
                           list.add(nearestTruckName);
                       else
                       {
                           for(int n = 0; n <= list.size()-1; n++)
                           {
                               if(nearestTruckName.equals(list.get(n)))
                                  repeatTruckName = true;
                           }
                       }

                       if (repeatTruckName == false)
                           list.add(nearestTruckName);

                   }
                }

                repeatTruckName = false;

                for(int n = 0; n <= list.size()-1; n++){
               
                    String truckLocationInQ3 = "SELECT t.shape.sdo_point.x, t.shape.sdo_point.y FROM trucks t WHERE t.truck_name = '"+list.get(n)+"'";
                    inputQuery.append("Query"+(queryCount1+n+1)+":"+truckLocationInQ3+"\n");
                    rsTruckLocationInQ3 = stmt.executeQuery(truckLocationInQ3);
                    while (rsTruckLocationInQ3.next()){
                        int TruckLocationXInQ3 = rsTruckLocationInQ3.getInt(1);//Get truck location
                        int TruckLocationYInQ3 = rsTruckLocationInQ3.getInt(2);//Get truck location
                        
                        preTruckX.add(TruckLocationXInQ3);
                        preTruckY.add(TruckLocationYInQ3);

                        truckTriXInQ3 [0] = TruckLocationXInQ3;
		        truckTriYInQ3 [0] = TruckLocationYInQ3 - 3;
		        truckTriXInQ3 [1] = TruckLocationXInQ3 - 5;
		        truckTriYInQ3 [1] = TruckLocationYInQ3 + 4;
		        truckTriXInQ3 [2] = TruckLocationXInQ3 + 5;
		        truckTriYInQ3 [2] = TruckLocationYInQ3 + 4;

                        g.fillPolygon(truckTriXInQ3, truckTriYInQ3, 3);
                    }
                }

                rsTruckLocationInQ3.close();
                rsTruckNameInQ3.close();
                rsTruckNameInQ3Count.close();
                rsVaccID.close();
                rs.close();
                stmt2.close();
                stmt3.close();
                stmt.close();
                conn.close();//close the connection

            } 
            catch (SQLException ex) {
                Logger.getLogger(hw2.class.getName()).log(Level.SEVERE, null, ex);
            }
           
           }
       }

    }                                                 
    //This method is used for clear button
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            

       map.repaint();
       inputQuery.setText("");
       outputInfo.setText("");
       count = 0;
 
    }                                           
    //This method is used for find nearest vaccination supplies action
    private void vaccSuppliesActionPerformed(java.awt.event.ActionEvent evt) {                                             
       findRangeRadioButton = false;
       vaccCoverageRadioButton = false;
       vaccSuppliesRadioButton = true;

    }                                            

    /**
    * This is main function
    */
    public static void main(String args[]){
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw2().setVisible(true);
            }
        });
    }
}
